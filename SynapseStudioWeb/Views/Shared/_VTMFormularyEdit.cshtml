@model SynapseStudioWeb.Models.MedicationMgmt.FormularyEditModel;

<style type="text/css">
    div.token-input-dropdown-facebook {
        /*z-index: 1051 !important;*/
        height: 200px !important;
        overflow-y: scroll !important;
        overflow-x: hidden !important;
    }

    .accordion-menu > button {
        display: block;
        position: relative;
    }

        .accordion-menu > button:after {
            content: "\f078"; /* fa-chevron-down */
            font-family: 'FontAwesome';
            position: absolute;
            right: 12px;
        }

        .accordion-menu > button[aria-expanded="true"]:after {
            content: "\f077"; /* fa-chevron-up */
        }

    .validation-summary-valid .header-msg {
        display: none;
    }
     .classification-component {
    margin: 0px 10px !important;
    width: 100% !important;
    }
</style>
<link href="~/lib/token-input-1.6.0/styles/token-input-facebook.css" rel="stylesheet" type="text/css" />
<div asp-validation-summary="All" class="text-danger" id="pnlMedicationValidationSmry">
    <div class="header-msg m-1 p-1">Please correct the following errors</div>
</div>
<script type="text/javascript">
    var rootCustomMedicationId = "@Model.ControlIdentifier";
    var rootCustomMedicationIdSelector = "#@Model.ControlIdentifier";
</script>
@{
    var DeriveId = new Func<string, string>((id) => $"{Model.ControlIdentifier}_{id}");

    var baseURLPath = string.IsNullOrEmpty(Context.Request.PathBase) ? $"{ Context.Request.Scheme }://{Context.Request.Host}" : $"{ Context.Request.Scheme }://{Context.Request.Host}{Context.Request.PathBase}";

    var DeriveAbsUrl = new Func<string, string>((actionPath) => string.IsNullOrEmpty(actionPath) ? "" : $"{ baseURLPath}/{actionPath.TrimStart('/')}");
}
<div class="vtm-edit-medication root-vtm-edit-medication" id="@Model.ControlIdentifier">
    <div id="accordion">
        <div class="card">
            <div class="card-header" id="headingOne">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #productDetails" aria-expanded="true" aria-controls="productDetails">
                        <i class="fas fa-tablets"></i> Product Details
                    </button>
                </h5>
            </div>

            <div id="productDetails" class="collapse show" aria-labelledby="headingOne" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    <div class="form-group row">
                        <label for="name" class="col-sm-5 col-form-label">Name</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(m => m.Name, new { @class = "form-control", data_isreadonly = "true" })
                            @Html.ValidationMessageFor(m => m.Name)
                            @Html.HiddenFor(m => m.IsImported)
                            @Html.HiddenFor(m => m.IsBulkEdit)
                            @Html.HiddenFor(m => m.RecSource)
                            @Html.HiddenFor(m => m.ControlIdentifier)
                            @Html.HiddenFor(m => m.IsDuplicate)
                            @Html.HiddenFor(m => m.DuplicateOfFormularyId)
                            @Html.HiddenFor(m => m.ParentCode)
                            @Html.HiddenFor(m => m.ParentName)
                            @Html.HiddenFor(m => m.FormularyId)
                            @Html.HiddenFor(m => m.ParentFormularyId)
                            @Html.HiddenFor(m => m.ParentProductType)
                            @*@Html.HiddenFor(m => m.ControlledDrugCategorySource)*@
                            @Html.HiddenFor(m => m.HighAlertMedicationSource)
                            @Html.HiddenFor(m => m.BlackTriangleSource)
                            @Html.HiddenFor(m => m.PrescribableSource)
                            @Html.HiddenFor(m => m.OriginalPrescribable)

                            @for (var fvidIndex = 0; fvidIndex < Model.FormularyVersionIds.Count; fvidIndex++)
                            {
                                @Html.HiddenFor(m => m.FormularyVersionIds[fvidIndex])
                            }
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="producttype" class="col-sm-5 col-form-label">Product Type</label>
                        <div class="col-sm-7">
                            @Html.DropDownListFor(m => m.ProductType, ViewBag.ProductTypes as SelectList, new { @class = "form-control", @disabled = "disabled" })
                            @Html.HiddenFor(m => m.ProductType, new { @id = DeriveId("hdnProductType") })
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="code" class="col-sm-5 col-form-label">Primary Code</label>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(m => m.Code, new { @class = "form-control", data_isreadonly = "true" })
                            @Html.ValidationMessageFor(m => m.Code)
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="codesystem" class="col-sm-5 col-form-label">Primary Code System</label>
                        <div class="col-sm-7">
                            @Html.HiddenFor(m => m.CodeSystem, new { @id = "hdnCodeSystem" })
                            @Html.TextBoxFor(m => m.CodeSystem, new { @class = "form-control", data_isreadonly = "true", @id = "txtCodeSystem" })
                        </div>
                    </div>
                    @if (string.Compare(Environment.GetEnvironmentVariable("settings_UseAsDMDBrowser") ?? "false", "true", true) != 0)
                    {
                        <div class="form-group row">
                            <label for="formularystatus" class="col-sm-4 col-form-label">Formulary Status</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Formulary_Status_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Formulary_Status_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Formulary_Status_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Formulary_Status_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                @Html.DropDownListFor(m => m.RnohFormularyStatuscd, ViewBag.FormularyStatuses as SelectList, new { @disabled = "disabled", @class = "form-control", @id = "ddlRnohFormularyStatuscd" })
                                @Html.HiddenFor(m => m.RnohFormularyStatuscd)

                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <div class="h6">
                                    Other Identification Codes
                                    <div class="float-right">
                                        <label class="mr-2"><a href="#" class="add-identification-code" id="@DeriveId("btnAddIdentificationCode")"><i class="fa fa-plus"></i></a></label>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="IdentificationCodeContainer" data-existingidentificationcode="@SynapseStudioWeb.Helpers.Extensions.SerializeAdditionalCodeToJsonArray(Model.FormularyIdentificationCodes)" data-isreadonly="false">
                                    <!--Add Identification Code Controls -->
                                </div>
                            </div>
                        </div>
                    }
                    @*<div class="card mb-2">
                        <div class="card-header">
                            <div class="h6">
                                Classification Codes
                            </div>
                        </div>
                        <div class="card-body">
                            <div id="AdditionalCodeContainer" data-existingadditionalcode="@SynapseStudioWeb.Helpers.Extensions.SerializeAdditionalCodeToJsonArray(Model.FormularyClassificationCodes)" data-isreadonly="true">
                                <!--Add Classification Code Controls -->
                            </div>
                        </div>
                    </div>*@
                    <div class="form-group row">
                        <div class="classification-component">
                            <classification-el id="classification_codes" product-type="@Model.ProductType" classificationtypes="@SynapseStudioWeb.Helpers.Extensions.SerializeSelectListToJsonArray(ViewBag.ClassificationCodeTypes)" existingadditionalcode="@SynapseStudioWeb.Helpers.Extensions.SerializeAdditionalCodeToJsonArray(Model.FormularyClassificationCodes)"></classification-el>
                        </div>
                    </div>
                    @if (string.Compare(Environment.GetEnvironmentVariable("settings_UseAsDMDBrowser") ?? "false", "true", true) != 0)
                    {
                        <div class="form-group row">
                            <label for="localLicensedUse" class="col-sm-4 col-form-label">Local Formulary Indications</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                <p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LocalLicensedUse)" data-isdisabled="true" data-singleselect="false" id="@DeriveId("localLicensedUse")" name="localLicensedUse" type="text" data-query-url="@DeriveAbsUrl("/Formulary/SearchIndicationWithDisorderAndFinding")" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="localUnlicensedUse" class="col-sm-4 col-form-label">Local Non-formulary Indications</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p>
                         </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LocalUnlicensedUse)" data-isdisabled="true" data-singleselect="false" id="@DeriveId("localUnlicensedUse")" name="localUnlicensedUse" type="text" data-query-url="@DeriveAbsUrl("/Formulary/SearchIndicationWithDisorderAndFinding")" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="licenseduse" class="col-sm-4 col-form-label">Licensed Indications</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.FDB_DATA_SOURCE </p><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LicensedUse)" data-isdisabled="true" data-singleselect="false" id="@DeriveId("licensedUse")" name="licensedUse" type="text" data-query-url="@DeriveAbsUrl("/Formulary/SearchIndicationWithDisorderAndFinding")" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="unlicenseduse" class="col-sm-4 col-form-label">Unlicensed Indications</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.UnlicensedUse)" data-isdisabled="true" data-singleselect="false" id="@DeriveId("unlicensedUse")" name="unlicensedUse" type="text" data-query-url="@DeriveAbsUrl("/Formulary/SearchIndicationWithDisorderAndFinding")" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingTwo">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #posology" aria-expanded="false" aria-controls="posology">
                        <i class="fas fa-flask"></i> Posology
                    </button>
                </h5>
            </div>

            <div id="posology" class="collapse" aria-labelledby="headingTwo" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    @if (string.Compare(Environment.GetEnvironmentVariable("settings_UseAsDMDBrowser") ?? "false", "true", true) != 0)
                    {
                        <div class="form-group row">
                            <label for="Route" class="col-sm-4 col-form-label">Local Licensed Route</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                @Html.TextBoxFor(m => m.LocalLicensedRoute, new { @class = "form-control studio-autocomplete", @id = $"{DeriveId("localLicensedRoute")}", data_existingdata = SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LocalLicensedRoute), data_singleselect = "false", data_isdisabled = "true", data_query_url = DeriveAbsUrl("/Formulary/SearchRoutes") })
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="unlicensedroute" class="col-sm-4 col-form-label">Local Unlicensed Route</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.LocalUnlicensedRoute)" data-singleselect="false" data-query-url=@DeriveAbsUrl("/Formulary/SearchRoutes") data-isdisabled="true" id="@DeriveId("localUnlicensedRoute")" name="LocalUnlicensedRoute" type="text" />
                            </div>
                        </div>
                    }
                    <div class="form-group row">
                        <label for="Route" class="col-sm-4 col-form-label">Licensed Route</label>
                        <div class="col-sm-1 text-right">
                            <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.DMD_DATA_SOURCE_DISPLAY </p><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                        </div>
                        <div class="col-sm-7">
                            @Html.TextBoxFor(m => m.Route, new { @class = "form-control studio-autocomplete", @id = $"{DeriveId("Route")}", data_existingdata = SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.Route), data_singleselect = "false", data_isdisabled = true })
                            @Html.ValidationMessageFor(m => m.Route)
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="unlicensedroute" class="col-sm-4 col-form-label">Unlicensed Route</label>
                        <div class="col-sm-1 text-right">
                            <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                        </div>
                        <div class="col-sm-7">
                            <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.UnlicensedRoute)" data-singleselect="false" data-isdisabled="true" id="@DeriveId("unlicensedRoute")" name="unlicensedRoute" type="text" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingThree">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #guidance" aria-expanded="false" aria-controls="guidance">
                        <i class="fas fa-book-reader"></i> Guidance
                    </button>
                </h5>
            </div>

            <div id="guidance" class="collapse" aria-labelledby="headingThree" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    @if (string.Compare(Environment.GetEnvironmentVariable("settings_UseAsDMDBrowser") ?? "false", "true", true) != 0)
                    {
                        <div class="form-group row">
                            <label for="contraindications" class="col-sm-4 col-form-label">Contraindications</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.FDB_DATA_SOURCE </p><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.ContraIndications)" data-isdisabled="true" data-singleselect="false" id="@DeriveId("contraindications")" name="contraindications" type="text" />
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <div class="h6">
                                    Custom Warnings
                                    <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                    @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Custom_Warning_Agg"), "all", true) == 0)
                                    {
                                        <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                    }
                                    @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Custom_Warning_Agg"), "any", true) == 0)
                                    {
                                        <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                    }
                                    @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Custom_Warning_Agg"), "all", true) == 0)
                                    {
                                        <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                    }
                                    @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Custom_Warning_Agg"), "any", true) == 0)
                                    {
                                        <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                    }
                                </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="CustomWarningContainer" data-existingcustomwarning="@SynapseStudioWeb.Helpers.Extensions.SerializeListToJsonArray(Model.CustomWarnings)">
                                    <!--Add Custom Warning Controls -->
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <div class="h6">
                                    Reminders
                                    <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                    @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Reminder_Agg"), "all", true) == 0)
                                    {
                                        <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                    }
                                    @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Reminder_Agg"), "any", true) == 0)
                                    {
                                        <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                    }
                                    @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Reminder_Agg"), "all", true) == 0)
                                    {
                                        <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                    }
                                    @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Reminder_Agg"), "any", true) == 0)
                                    {
                                        <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                    }
                                </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="ReminderContainer" data-existingreminder="@SynapseStudioWeb.Helpers.Extensions.SerializeListToJsonArray(Model.Reminders)">
                                    <!--Add Reminder Controls -->
                                </div>
                            </div>
                        </div>
                        <div class="card mb-2">
                            <div class="card-header">
                                <div class="h6">
                                    Endorsements
                                    <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                                </div>
                            </div>
                            <div class="card-body">
                                <div id="EndorsementContainer" data-existingendorsements="@SynapseStudioWeb.Helpers.Extensions.SerializeListToJsonArray(Model.Endorsements)">
                                    <!--Add Endorsement Controls -->
                                </div>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="safetyMessages" class="col-sm-5 col-form-label">Important Safety Information</label>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-singleselect="false" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.SafetyMessages)" data-isdisabled="true" id="@DeriveId("safetyMessages")" name="safetyMessages" type="text" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="medusapreparationinstructions" class="col-sm-4 col-form-label">Medusa Preparation Instructions</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                @*<input class="form-control studio-autocomplete" data-singleselect="false" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.MedusaPreparationInstructions)" data-isdisabled="true" id="@DeriveId("MedusaPreparationInstructions")" name="MedusaPreparationInstructions" type="text" />*@
                                @if (Model.MedusaPreparationInstructions != null && Model.MedusaPreparationInstructions.Count > 0)
                                {
                                    @foreach (var data in Model.MedusaPreparationInstructions)
                                    {
                                        <div class="form-control" style="display: flex; flex-direction: column; height: 60px; overflow-y: auto" readonly="readonly">
                                            @Html.Raw(data.Name.Replace(Environment.NewLine, "<br/>"))
                                        </div>
                                    }
                                }
                                else
                                {
                                    <div class="form-control" style="height: 60px;" readonly="readonly"></div>
                                }
                            </div>
                        </div>
                        @*<div class="form-group row">
                            <label for="niceta" class="col-sm-5 col-form-label">NICE TA</label>
                            <div class="col-sm-7">
                                @Html.TextBoxFor(m => m.NICETA, new { @class = "form-control" })
                            </div>
                        </div>*@
                        <div class="form-group row">
                            <label for="sideeffects" class="col-sm-4 col-form-label">Side Effects</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.FDB_DATA_SOURCE </p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.SideEffects)" data-isdisabled="true" data-singleselect="false" id="@DeriveId("sideEffects")" name="sideEffects" type="text" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="cautions" class="col-sm-4 col-form-label">Warnings</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.FDB_DATA_SOURCE </p><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.Cautions)" data-isdisabled="true" data-singleselect="false" id="@DeriveId("cautions")" name="cautions" type="text" />
                            </div>
                        </div>
                    }
                    <div class="form-group row">
                        <label for="controlleddrugcategory" class="col-sm-4 col-form-label">Controlled Drug Category</label>
                        <div class="col-sm-1 text-right">
                            <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.DMD_DATA_SOURCE_DISPLAY </p><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                        </div>
                        <div class="col-sm-7">
                            @*<input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.ControlledDrugCategories)" data-isdisabled="true" data-singleselect="true" id="@DeriveId("ControlledDrugCategories")" name="ControlledDrugCategories" type="text" />*@
                            @Html.HiddenFor(m => m.ControlledDrugCategoryCd)
                            @Html.TextBoxFor(m => m.ControlledDrugCategoryDesc, new { @class = "form-control", data_isreadonly = "true" })
							
                        </div>
                    </div>
                    @if (string.Compare(Environment.GetEnvironmentVariable("settings_UseAsDMDBrowser") ?? "false", "true", true) != 0)
                    {
                        <div class="form-group row">
                            <label for="titrationtype" class="col-sm-4 col-form-label">Titration Type</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.TitrationTypes)" data-isdisabled="true" data-singleselect="true" id="@DeriveId("TitrationTypes")" name="TitrationTypes" type="text" />
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="Diluents" class="col-sm-4 col-form-label">Compatible Diluents</label>
                            <div class="col-sm-1 text-right">
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule3")<br/>@SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule3")</p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                            <div class="col-sm-7">
                                <input class="form-control studio-autocomplete" data-existingdata="@SynapseStudioWeb.Helpers.Extensions.SerializeCodeNameListToJsonArray(Model.Diluents)" data-isdisabled="true" data-singleselect="false" id="@DeriveId("Diluents")" name="Diluents" type="text" />
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="card">
            <div class="card-header" id="headingFour">
                <h5 class="mb-0 accordion-menu">
                    <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #flagsClassification" aria-expanded="false" aria-controls="flagsClassification">
                        <i class="fas fa-flag"></i> Flags / Classification
                    </button>
                </h5>
            </div>

            <div id="flagsClassification" class="collapse" aria-labelledby="headingFour" data-parent="#@Model.ControlIdentifier #accordion">
                <div class="card-body">
                    @if (string.Compare(Environment.GetEnvironmentVariable("settings_UseAsDMDBrowser") ?? "false", "true", true) != 0)
                    {
                        <div class="form-group row">
                            <label for="blacktriangle" class="col-sm-5 col-form-label">Black Triangle</label>
                            <div class="col-sm-7">
                                @Html.HiddenFor(m => m.BlackTriangle, new { @id = "hdnBlackTriangle" })
                                @Html.CheckBoxFor(m => m.BlackTriangle, new { @disabled = "disabled", @id = "chkBlackTriangle" })
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                <p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.FDB_DATA_SOURCE </p>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Black_Triangle_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Black_Triangle_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Black_Triangle_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Black_Triangle_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="clinicaltrialmedication" class="col-sm-5 col-form-label">Clinical Trial Medication</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.ClinicalTrialMedication, new { @disabled = "disabled", @id = "chkClinicalTrialMedication" })
                                @Html.HiddenFor(m => m.ClinicalTrialMedication)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Clinical_Trial_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Clinical_Trial_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Clinical_Trial_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Clinical_Trial_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="criticaldrug" class="col-sm-5 col-form-label">Critical Drug</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.CriticalDrug, new { @disabled = "disabled", @id = DeriveId("chkCriticalDrug") })
                                @Html.HiddenFor(m => m.CriticalDrug)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Critical_Drug_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Critical_Drug_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Critical_Drug_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Critical_Drug_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }

                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                    }
                    <div class="form-group row">
                        <label for="EmaAdditionalMonitoring" class="col-sm-5 col-form-label">EMA Additional Monitoring</label>
                        <div class="col-sm-7">
                            @Html.CheckBoxFor(m => m.EmaAdditionalMonitoring, new { @id = DeriveId("chkEmaAdditionalMonitoring"), @disabled = "disabled" })
                            @Html.HiddenFor(m => m.EmaAdditionalMonitoring)
                            <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                <p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.DMD_DATA_SOURCE_DISPLAY </p>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_EMA_Addnl_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_EMA_Addnl_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_EMA_Addnl_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_EMA_Addnl_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="IsGastroResistant" class="col-sm-5 col-form-label">Gastro Resistant</label>
                        <div class="col-sm-7">
                            @Html.CheckBoxFor(m => m.IsGastroResistant, new { @id = DeriveId("chkIsGastroResistant"), @disabled = "disabled" })
                            @Html.HiddenFor(m => m.IsGastroResistant)
                            <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Gastro_Resistant_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Gastro_Resistant_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Gastro_Resistant_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Gastro_Resistant_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="IsModifiedRelease" class="col-sm-5 col-form-label">Modified Release</label>
                        <div class="col-sm-7">
                            @Html.CheckBoxFor(m => m.IsModifiedRelease, new { @id = DeriveId("chkIsModifiedRelease"), @disabled = "disabled" })
                            @Html.HiddenFor(m => m.IsModifiedRelease)
                            <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Modified_Release_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Modified_Release_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Modified_Release_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Modified_Release_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                        </div>
                    </div>
                    @if (string.Compare(Environment.GetEnvironmentVariable("settings_UseAsDMDBrowser") ?? "false", "true", true) != 0)
                    {
                        <div class="form-group row">
                            <label for="ExpensiveMedication" class="col-sm-5 col-form-label">Expensive Medication</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.ExpensiveMedication, new { @id = DeriveId("chkExpensiveMedication"), @disabled = "disabled" })
                                @Html.HiddenFor(m => m.ExpensiveMedication)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Expensive_Med_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Expensive_Med_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Expensive_Med_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Expensive_Med_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="highalertmedication" class="col-sm-5 col-form-label">High Alert Medication</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.HighAlertMedication, new { @disabled = "disabled", @id = "chkHighAlertMedication" })
                                @Html.HiddenFor(m => m.HighAlertMedication)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                            @if (Model.HighAlertMedicationSource != null && string.Compare(Model.HighAlertMedicationSource, SynapseStudioWeb.AppCode.Constants.TerminologyConstants.FDB_DATA_SOURCE, true) == 0)
                            {
                                <p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.FDB_DATA_SOURCE </p>
                            }

                            @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_High_Alert_Med_Agg"), "all", true) == 0)
                            {
                                <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                            }
                            @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_High_Alert_Med_Agg"), "any", true) == 0)
                            {
                                <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                            }
                            @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_High_Alert_Med_Agg"), "all", true) == 0)
                            {
                                <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                            }
                            @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_High_Alert_Med_Agg"), "any", true) == 0)
                            {
                                <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                            }
                        </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="ivtooral" class="col-sm-5 col-form-label">IV to Oral</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.IVToOral, new { @disabled = "disabled", @id = "chkIVToOral" })
                                @Html.HiddenFor(m => m.IVToOral)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_IV_TO_Oral_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_IV_TO_Oral_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_IV_TO_Oral_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_IV_TO_Oral_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="diluent" class="col-sm-5 col-form-label">Not for PRN</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.NotForPrn, new { @disabled = "disabled", @id = "chkNotForPrn" })
                                @Html.HiddenFor(m => m.NotForPrn)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Not_For_PRN_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Not_For_PRN_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Not_For_PRN_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Not_For_PRN_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="bloodproduct" class="col-sm-5 col-form-label">Blood Product</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.IsBloodProduct, new { @disabled = "disabled", @id = "chkIsBloodProduct" })
                                @Html.HiddenFor(m => m.IsBloodProduct)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Blood_Product_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Blood_Product_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Blood_Product_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Blood_Product_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="diluent" class="col-sm-5 col-form-label">Diluent</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.IsDiluent, new { @disabled = "disabled", @id = "chkIsDiluent" })
                                @Html.HiddenFor(m => m.IsDiluent)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Diluent_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Diluent_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Diluent_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Diluent_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="orderable" class="col-sm-5 col-form-label">Prescribable</label>
                            <div class="col-sm-7">
                                @if (Model.Prescribable == false && Model.PrescribableSource == SynapseStudioWeb.AppCode.Constants.TerminologyConstants.DMD_DATA_SOURCE)
                                {
                                    @Html.CheckBoxFor(m => m.Prescribable, new { @id = DeriveId("chkPrescribable"), @disabled = "disabled" })
                                    @Html.HiddenFor(m => m.Prescribable, new { @disabled = "disabled" })
                                    <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.DMD_DATA_SOURCE_DISPLAY </p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                                }
                                else
                                {
                                    @Html.CheckBoxFor(m => m.Prescribable)
                                }
                            </div>
                        </div>
                    }
                    @if (string.Compare(Environment.GetEnvironmentVariable("settings_UseAsDMDBrowser") ?? "false", "true", true) != 0)
                    {
                        <div class="form-group row">
                            <label for="ignoreduplicatewarnings" class="col-sm-5 col-form-label">Ignore Duplicate Warnings</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.IgnoreDuplicateWarnings, new { @disabled = "disabled", @id = "chkIgnoreDuplicateWarnings" })
                                @Html.HiddenFor(m => m.IgnoreDuplicateWarnings)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Ignore_Dup_warnings_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Ignore_Dup_warnings_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Ignore_Dup_warnings_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Ignore_Dup_warnings_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="IsCustomControlledDrug" class="col-sm-5 col-form-label">Controlled Drug</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.IsCustomControlledDrug, new { @disabled = "disabled", @id = "chkIsCustomControlledDrug" })
                                @Html.HiddenFor(m => m.IsCustomControlledDrug)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Custom_Controlled"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Custom_Controlled"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Custom_Controlled"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Custom_Controlled"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="IsPrescriptionPrintingRequired" class="col-sm-5 col-form-label">Prescription Printing Required</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.IsPrescriptionPrintingRequired, new { @disabled = "disabled", @id = "chkIsPrescriptionPrintingRequired" })
                                @Html.HiddenFor(m => m.IsPrescriptionPrintingRequired)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Prescription_Printing_Required"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Prescription_Printing_Required"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Prescription_Printing_Required"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Prescription_Printing_Required"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>
                        <div class="form-group row">
                            <label for="IsIndicationMandatory" class="col-sm-5 col-form-label">Indication Is Mandatory</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.IsIndicationMandatory, new { @disabled = "disabled", @id = "chkIsIndicationMandatory" })
                                @Html.HiddenFor(m => m.IsIndicationMandatory)
                                <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left>
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Indication_Mandatory_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VMP_Is_Indication_Mandatory_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VMP_Rule1")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Indication_Mandatory_Agg"), "all", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule2")</p> <br />
                                }
                                @if (string.Compare(SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetFormularyRules("VTM_Is_Indication_Mandatory_Agg"), "any", true) == 0)
                                {
                                    <p> @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.GetMergeRuleDesc("VTM_Rule1")</p> <br />
                                }
                            </div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                            </div>
                        </div>

                        <div class="form-group row">
                            <label for="witnessingrequired" class="col-sm-5 col-form-label">Witnessing Required</label>
                            <div class="col-sm-7">
                                @Html.CheckBoxFor(m => m.WitnessingRequired)
                            </div>
                        </div>
                    }
                    <div class="form-group row">
                        <label for="isdmdinvalid" class="col-sm-5 col-form-label">Invalid in DM+D</label>
                        <div class="col-sm-7">
                            @Html.HiddenFor(m => m.IsDmdInvalid)
                            @Html.CheckBoxFor(m => m.IsDmdInvalid, new { @id = DeriveId("chkIsDmdInvalid"), @disabled = "disabled" })
                            <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.DMD_DATA_SOURCE_DISPLAY </p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label for="isdmddeleted" class="col-sm-5 col-form-label">Deleted in DM+D</label>
                        <div class="col-sm-7">
                            @Html.HiddenFor(m => m.IsDmdDeleted)
                            @Html.CheckBoxFor(m => m.IsDmdDeleted, new { @id = DeriveId("chkIsDmdDeleted"), @disabled = "disabled" })
                            <span class="icon-tooltip fas fa-info-circle text-info text-left" data-tooltip-content="<div class=text-left><p>Source: @SynapseStudioWeb.AppCode.Constants.TerminologyConstants.DMD_DATA_SOURCE_DISPLAY </p></div>" onclick="showFormularyCntrlTooltip(this)" onmouseover="showFormularyCntrlTooltip(this)"></span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        @*@if (!Model.IsBulkEdit)
            {
                <div class="card">
                    <div class="card-header" id="headingFive">
                        <h5 class="mb-0 accordion-menu">
                            <button class="btn btn-block text-left" type="button" data-toggle="collapse" data-target="#@Model.ControlIdentifier #history" aria-expanded="false" aria-controls="history">
                                <i class="fas fa-history"></i> History
                            </button>
                        </h5>
                    </div>

                    <div id="history" class="collapse" aria-labelledby="headingFive" data-parent="#@Model.ControlIdentifier #accordion">
                        <div class="card-body">
                            <div class="form-group row">
                                <label for="id" class="col-sm-5 col-form-label">ID</label>
                                <div class="col-sm-7">
                                    @Html.TextBoxFor(m => m.FormularyVersionIds[0], new { @class = "form-control", data_isreadonly = "true" })
                                </div>
                            </div>
                            <div class="form-group row">
                                <label for="status" class="col-sm-5 col-form-label">Status</label>
                                <div class="col-sm-7">
                                    @Html.DropDownListFor(m => m.Status, ViewBag.RecordStatuses as SelectList, new { @class = "form-control", @id = DeriveId("ddlRecordStatus") })
                                    @Html.HiddenFor(m => m.OriginalStatus)
                                </div>
                            </div>
                            <div id="@DeriveId("pnlReason")" data-initialstatus="@Model.Status" class="form-group row">
                                <label class="col-sm-5 col-form-label">Reason</label>
                                <div class="col-sm-7">
                                    @Html.TextAreaFor(m => m.RecStatuschangeMsg, new { @class = "form-control" })
                                    @Html.ValidationMessageFor(m => m.RecStatuschangeMsg)
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }*@
    </div>
</div>

@await Html.PartialAsync("_FormularyIdentificationCodeTmpl", new ViewDataDictionary(ViewData) { { "DeriveId", DeriveId } })

@await Html.PartialAsync("_FormularyAdditionalCodeDisabledTmpl", new ViewDataDictionary(ViewData) { { "DeriveId", DeriveId } })

@await Html.PartialAsync("_FormularyCustomWarningDisabledTmpl", new ViewDataDictionary(ViewData) { { "DeriveId", DeriveId } })

@await Html.PartialAsync("_FormularyReminderDisabledTmpl", new ViewDataDictionary(ViewData) { { "DeriveId", DeriveId } })

@await Html.PartialAsync("_FormularyEndorsementDisabledTmpl", new ViewDataDictionary(ViewData) { { "DeriveId", DeriveId } })

<script type="text/javascript" src="~/lib/token-input-1.6.0/src/jquery.tokeninput.js"></script>
<script type="text/javascript">

    $(document).ready(function () {

        setTimeout(() => {
            let inputs = $(".vtm-edit-medication :input");
            if (inputs && inputs.length > 0) {
                inputs.each(function(indx, el) {
                    let isReadOnly = $(this).data('isreadonly');
                    if (isReadOnly == true) $(this).attr('readonly', true);
                });
            }
        }, 100);

        //initAdditionalCodes('#@Model.ControlIdentifier');

        initIdentificationCodes('#@Model.ControlIdentifier');

        initCustomWarnings('#@Model.ControlIdentifier');

        initReminders('#@Model.ControlIdentifier');

        initEndorsements('#@Model.ControlIdentifier');

        let rootCntrl = '#@Model.ControlIdentifier';

        let recStatusCntrolId = `${rootCntrl}_pnlReason`;
        onRecordStatusChange(recStatusCntrolId, $(recStatusCntrolId).data('initialstatus'));

        $(`${rootCntrl}_ddlRecordStatus`).on('change', function () {
            let rootCntrl = '#@Model.ControlIdentifier';
            let recStatusCntrolId = `${rootCntrl}_pnlReason`;
            onRecordStatusChange(recStatusCntrolId, $(this).val());
        });


        convertChkToSwitch(rootCntrl);

        if($(`${rootCntrl}_cautions`) && $(`${rootCntrl}_cautions`).length) {
            var cautions = new studio.AutoComplete(`${rootCntrl}_cautions`, null, null, null, { allowFreeTagging: true });
            cautions.init();
        }

         if($(`${rootCntrl}_contraindications`) && $(`${rootCntrl}_contraindications`).length) {
            var contraindications = new studio.AutoComplete(`${rootCntrl}_contraindications`, null, null, null, { disabled: true });
            contraindications.init();
         }

         if($(`${rootCntrl}_sideEffects`) && $(`${rootCntrl}_sideEffects`).length) {
            var sideEffects = new studio.AutoComplete(`${ rootCntrl }_sideEffects`, null, null, null, { allowFreeTagging: true });
            sideEffects.init();
         }

         if($(`${rootCntrl}_safetyMessages`) && $(`${rootCntrl}_safetyMessages`).length) {
            var impSafetyInfo = new studio.AutoComplete(`${rootCntrl}_safetyMessages`, null, null, null, { allowFreeTagging: true });
            impSafetyInfo.init();
         }

         if($(`${rootCntrl}_licensedUse`) && $(`${rootCntrl}_licensedUse`).length) {
            var licensedUse = new studio.AutoComplete(`${rootCntrl}_licensedUse`, null, null, null, { });
            licensedUse.init();
         }

         if($(`${rootCntrl}_unlicensedUse`) && $(`${rootCntrl}_unlicensedUse`).length) {
            var unlicensedUse = new studio.AutoComplete(`${ rootCntrl }_unlicensedUse`, null, null, null, { });
            unlicensedUse.init();
         }

         if($(`${rootCntrl}_localLicensedUse`) && $(`${rootCntrl}_localLicensedUse`).length) {
            var localLicensedUse = new studio.AutoComplete(`${rootCntrl}_localLicensedUse`, null, null, null, {});
            localLicensedUse.init();
         }

         if($(`${rootCntrl}_localUnlicensedUse`) && $(`${rootCntrl}_localUnlicensedUse`).length) {
            var localUnlicensedUse = new studio.AutoComplete(`${rootCntrl}_localUnlicensedUse`, null, null, null, {});
            localUnlicensedUse.init();
         }

         if($(`${rootCntrl}_Route`) && $(`${rootCntrl}_Route`).length) {
            let routeAutoComplete = new studio.AutoComplete(`${rootCntrl}_Route`);
            routeAutoComplete.init();
         }

        if($(`${rootCntrl}_unlicensedRoute`) && $(`${rootCntrl}_unlicensedRoute`).length) {
            let unlicensedRouteAutoComplete = new studio.AutoComplete(`${rootCntrl}_unlicensedRoute`);
            unlicensedRouteAutoComplete.init();
        }

         if($(`${rootCntrl}_localLicensedRoute`) && $(`${rootCntrl}_localLicensedRoute`).length) {
            let localRouteAutoComplete = new studio.AutoComplete(`${rootCntrl}_localLicensedRoute`);
            localRouteAutoComplete.init();
         }

         if($(`${rootCntrl}_localUnlicensedRoute`) && $(`${rootCntrl}_localUnlicensedRoute`).length) {
            let localUnlicensedRouteAutoComplete = new studio.AutoComplete(`${rootCntrl}_localUnlicensedRoute`);
            localUnlicensedRouteAutoComplete.init();
         }

        //let controlledDrugCategories = new studio.AutoComplete(`${rootCntrl}_ControlledDrugCategories`);
        //controlledDrugCategories.init();

         if($(`${rootCntrl}_TitrationTypes`) && $(`${rootCntrl}_TitrationTypes`).length) {
            let titrationTypes = new studio.AutoComplete(`${rootCntrl}_TitrationTypes`);
            titrationTypes.init();
         }

         if($(`${rootCntrl}_Diluents`) && $(`${rootCntrl}_Diluents`).length) {
            let diluents = new studio.AutoComplete(`${rootCntrl}_Diluents`);
            diluents.init();
         }

        //let medusaPreparationInstructions = new studio.AutoComplete(`${rootCntrl}_MedusaPreparationInstructions`);
        //medusaPreparationInstructions.init();


        $(`${rootCntrl}_btnAddIdentificationCode`).click(function () {

            let rootEl = $(this).closest('.root-vtm-edit-medication');
            let roolElId = $(rootEl).attr('id');
            let idenContainerElSel = `#${roolElId} #IdentificationCodeContainer`;

            let currIndex = $(idenContainerElSel).data('currindex');
            if (currIndex === undefined || currIndex === null) currIndex = 0;
            else currIndex = currIndex + 1;

            var indicationCodeTemplate = $.validator.format($.trim($(`#${roolElId}_identificationCodeTmpl`).html()));
            $(indicationCodeTemplate(currIndex)).appendTo(idenContainerElSel);
            $(idenContainerElSel).data('currindex', currIndex);
        });
    });



    function initIdentificationCodes(rootCntrlSel) {

        let idenContainerElSel = `${rootCntrlSel} #IdentificationCodeContainer`;

        let idenCodeTmplSel = `${rootCntrlSel}_identificationCodeTmpl`;

        let existingIdentCode = $(idenContainerElSel).data('existingidentificationcode');

        if (existingIdentCode && existingIdentCode.length > 0) {

            $(idenContainerElSel).html("");

            existingIdentCode.forEach(function (item, index) {
                //var addlCodeTemplate = (item && item.Source && item.Source === 'M') ? $.validator.format($.trim($(addlCodeTmplSel).html())) : $.validator.format($.trim($(addlCodeDisabledTmplSel).html()));

                var idenCodeTemplate = $.validator.format($.trim($(idenCodeTmplSel).html()));

                $(idenCodeTemplate(index)).appendTo(idenContainerElSel);

                $(`${rootCntrlSel}_IdentificationCode-${index}`).val(item.AdditionalCode);
                $(`${rootCntrlSel}_IdentificationCodeSystem-${index}`).val(item.AdditionalCodeSystem);

                $(`${rootCntrlSel}_IdentificationCodeDesc-${index}`).val(item.AdditionalCodeDesc);
                $(`${rootCntrlSel}_IdentificationAttr1-${index}`).val(item.Attr1);
                $(`${rootCntrlSel}_IdentificationMetaJson-${index}`).val(item.MetaJson);
                $(`${rootCntrlSel}_IdentificationSource-${index}`).val(item.Source);
                $(`${rootCntrlSel}_IdentificationCodeType-${index}`).val(item.CodeType);

                $(idenContainerElSel).data('currindex', index);
            });
        }
    }


    function initEndorsements(rootCntrlSel) {

        let containerElSel = `${rootCntrlSel} #EndorsementContainer`;

        let tmplSel = `${rootCntrlSel}_endorsementDisabledTmpl`;

        let existingData = $(containerElSel).data('existingendorsements');

        if (existingData && existingData.length > 0) {

            $(containerElSel).html("");

            existingData.forEach(function (item, index) {
                let template = $.validator.format($.trim($(tmplSel).html()));

                $(template(index)).appendTo(containerElSel);

                $(`${rootCntrlSel}_txtEndorsement-${index}`).val(item);

                $(containerElSel).data('currindex', index);
            });
        }
    }

    function initCustomWarnings(rootCntrlSel) {

        let cwContainerElSel = `${rootCntrlSel} #CustomWarningContainer`;

        let cwTmplSel = `${rootCntrlSel}_customWarningDisabledTmpl`;

        let existingCW = $(cwContainerElSel).data('existingcustomwarning');

        if (existingCW && existingCW.length > 0) {

            $(cwContainerElSel).html("");

            existingCW.forEach(function (item, index) {
                let cwTemplate = $.validator.format($.trim($(cwTmplSel).html()));

                $(cwTemplate(index)).appendTo(cwContainerElSel);

                $(`${rootCntrlSel}_txtCustomWarning-${index}`).val(item.Warning);
                $(`${rootCntrlSel}_chkNeedResponse-${index}`).prop('checked', (item.NeedResponse === true) ? true : false);
                $(`${rootCntrlSel}_hdnNeedResponse-${index}`).val((item.NeedResponse === true) ? true : false);

                $(cwContainerElSel).data('currindex', index);
            });
        }
    }

    function initReminders(rootCntrlSel) {

        let remContainerElSel = `${rootCntrlSel} #ReminderContainer`;

        let remTmplSel = `${rootCntrlSel}_reminderDisabledTmpl`;

        let existingRem = $(remContainerElSel).data('existingreminder');

        if (existingRem && existingRem.length > 0) {

            $(remContainerElSel).html("");

            existingRem.forEach(function (item, index) {
                let remTemplate = $.validator.format($.trim($(remTmplSel).html()));

                $(remTemplate(index)).appendTo(remContainerElSel);

                $(`${rootCntrlSel}_txtReminder-${index}`).val(item.Reminder);
                $(`${rootCntrlSel}_txtDuration-${index}`).val(item.Duration);
                $(`${rootCntrlSel}_chkActive-${index}`).prop('checked', (item.Active === true) ? true : false);
                $(`${rootCntrlSel}_hdnActive-${index}`).val((item.Active === true) ? true : false);

                $(remContainerElSel).data('currindex', index);
            });
        }
    }

    /*
    function initAdditionalCodes(rootCntrlSel) {
        let addlContainerElSel = `${rootCntrlSel} #AdditionalCodeContainer`;
        //let addlCodeTmplSel = `${rootCntrlSel}_additionalCodeTmpl`;
        let addlCodeDisabledTmplSel = `${rootCntrlSel}_additionalCodeDisabledTmpl`;

        let existingAddnCode = $(addlContainerElSel).data('existingadditionalcode');

        if (existingAddnCode && existingAddnCode.length > 0) {

            $(addlContainerElSel).html("");
            
            let additionalCodeSource = {};

            existingAddnCode.forEach((item, index) => {
                //var addlCodeTemplate = (item && item.Source && item.Source === 'M') ? $.validator.format($.trim($(addlCodeTmplSel).html())) : $.validator.format($.trim($(addlCodeDisabledTmplSel).html()));
                var addlCodeTemplate = $.validator.format($.trim($(addlCodeDisabledTmplSel).html()));
                $(addlCodeTemplate(index)).appendTo(addlContainerElSel);

                $(`${rootCntrlSel}_AdditionalCode-${index}`).val(item.AdditionalCode);
                $(`${rootCntrlSel}_AdditionalCodeSystem-${index}`).val(item.AdditionalCodeSystem);
                $(`${rootCntrlSel}_AdditionalCodeDesc-${index}`).val(item.AdditionalCodeDesc);
                $(`${rootCntrlSel}_Attr1-${index}`).val(item.Attr1);
                $(`${rootCntrlSel}_MetaJson-${index}`).val(item.MetaJson);
                $(`${rootCntrlSel}_Source-${index}`).val(item.Source);
                $(`${rootCntrlSel}_CodeType-${index}`).val(item.CodeType);
                $(`${rootCntrlSel}_AdditionalCodeIsDefault-${index}`).data('source', item.Source);
                $(`${rootCntrlSel}_AdditionalCodeIsDefault-${index}`).data('codesystem', item.AdditionalCodeSystem);
                $(`${rootCntrlSel}_AdditionalCodeIsDefault-${index}`).prop('checked', (item.IsDefault == true) ? true: false);

                $(addlContainerElSel).data('currindex', index);

                if(Object.keys(additionalCodeSource).length > 0 && additionalCodeSource[item.AdditionalCodeSystem]) {
                    //enable the previous indexes of same code system
                    $(additionalCodeSource[item.AdditionalCodeSystem]).bootstrapToggle('enable');
                } else {
                    //disable the first index
                    additionalCodeSource[item.AdditionalCodeSystem] = `${rootCntrlSel}_AdditionalCodeIsDefault-${index}`;
                    $(`${rootCntrlSel}_AdditionalCodeIsDefault-${index}`).bootstrapToggle('disable');
                }
            });
        }
    }
    */

    function convertChkToSwitch(rootCntrl) {
        $(`${rootCntrl} :checkbox`).bootstrapToggle('destroy');

        setTimeout(() => {
            $(`${rootCntrl} :checkbox`).bootstrapToggle({
                on: 'Yes',
                off: 'No',
                onstyle: 'success',
                offstyle: 'danger',
                width: 70,
                size: 'sm'
            });
        }, 100);
    }

    function onRecordStatusChange(reasonControlId, val) {
        if (!reasonControlId) return;
        if (val && val === "004")
            $(reasonControlId).show();
        else
            $(reasonControlId).hide();
    }
</script>
<script type="text/javascript" src="~/js/studio.autocomplete.js?v=@string.Format("{0}", DateTime.Now.Ticks)"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.unobtrusive-ajax.js"></script>